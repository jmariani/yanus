<?php

/**
 * This is the model base class for the table "Cfd".
 * DO NOT MODIFY THIS FILE! It is automatically generated by giix.
 * If any changes are necessary, you must set or override the required
 * property or method in class "Cfd".
 *
 * Columns in table "Cfd" available as properties of the model,
 * followed by relations of table "Cfd" available as properties of the model.
 *
 * @property integer $id
 * @property string $version
 * @property string $serial
 * @property integer $folio
 * @property string $uuid
 * @property string $dttm
 * @property string $seal
 * @property string $paymentType
 * @property string $certNbr
 * @property string $certificate
 * @property string $paymentTerms
 * @property string $subTotal
 * @property string $discount
 * @property string $discountReason
 * @property string $exchangeRate
 * @property string $currency
 * @property string $total
 * @property string $voucherType
 * @property string $paymentMethod
 * @property string $expeditionPlace
 * @property string $paymentAcctNbr
 * @property integer $sourceFolio
 * @property string $sourceSerial
 * @property string $sourceDttm
 * @property string $sourceAmt
 * @property string $issuerRfc
 * @property string $issuerName
 *
 * @property CfdAddress[] $cfdAddresses
 */
abstract class BaseCfd extends GxActiveRecord {

	public static function model($className=__CLASS__) {
		return parent::model($className);
	}

	public function tableName() {
		return 'Cfd';
	}

	public static function label($n = 1) {
        return Yii::t('app', 'Cfd|Cfds', $n);
	}

	public static function representingColumn() {
		return 'version';
	}

	public function rules() {
		return array(
			array('version, dttm, seal, paymentType, certNbr, certificate, subTotal, total, voucherType, paymentMethod, issuerRfc', 'required'),
			array('folio, sourceFolio', 'numerical', 'integerOnly'=>true),
			array('version, discount, voucherType', 'length', 'max'=>45),
			array('serial, sourceSerial', 'length', 'max'=>25),
			array('uuid', 'length', 'max'=>36),
			array('certNbr', 'length', 'max'=>20),
			array('subTotal, exchangeRate, total, sourceAmt', 'length', 'max'=>64),
			array('paymentAcctNbr', 'length', 'max'=>4),
			array('issuerRfc', 'length', 'max'=>13),
			array('paymentTerms, discountReason, currency, expeditionPlace, sourceDttm, issuerName', 'safe'),
			array('serial, folio, uuid, paymentTerms, discount, discountReason, exchangeRate, currency, expeditionPlace, paymentAcctNbr, sourceFolio, sourceSerial, sourceDttm, sourceAmt, issuerName', 'default', 'setOnEmpty' => true, 'value' => null),
			array('id, version, serial, folio, uuid, dttm, seal, paymentType, certNbr, certificate, paymentTerms, subTotal, discount, discountReason, exchangeRate, currency, total, voucherType, paymentMethod, expeditionPlace, paymentAcctNbr, sourceFolio, sourceSerial, sourceDttm, sourceAmt, issuerRfc, issuerName', 'safe', 'on'=>'search'),
		);
	}

	public function relations() {
		return array(
			'cfdAddresses' => array(self::HAS_MANY, 'CfdAddress', 'Cfd_id'),
		);
	}

	public function pivotModels() {
		return array(
		);
	}

	public function attributeLabels() {
		return array(
                			'id' => yii::t('app', 'Id'),
                			'version' => yii::t('app', 'Version'),
                			'serial' => yii::t('app', 'Serial'),
                			'folio' => yii::t('app', 'Folio'),
                			'uuid' => yii::t('app', 'Uuid'),
                			'dttm' => yii::t('app', 'Dttm'),
                			'seal' => yii::t('app', 'Seal'),
                			'paymentType' => yii::t('app', 'Payment Type'),
                			'certNbr' => yii::t('app', 'Cert Nbr'),
                			'certificate' => yii::t('app', 'Certificate'),
                			'paymentTerms' => yii::t('app', 'Payment Terms'),
                			'subTotal' => yii::t('app', 'Sub Total'),
                			'discount' => yii::t('app', 'Discount'),
                			'discountReason' => yii::t('app', 'Discount Reason'),
                			'exchangeRate' => yii::t('app', 'Exchange Rate'),
                			'currency' => yii::t('app', 'Currency'),
                			'total' => yii::t('app', 'Total'),
                			'voucherType' => yii::t('app', 'Voucher Type'),
                			'paymentMethod' => yii::t('app', 'Payment Method'),
                			'expeditionPlace' => yii::t('app', 'Expedition Place'),
                			'paymentAcctNbr' => yii::t('app', 'Payment Acct Nbr'),
                			'sourceFolio' => yii::t('app', 'Source Folio'),
                			'sourceSerial' => yii::t('app', 'Source Serial'),
                			'sourceDttm' => yii::t('app', 'Source Dttm'),
                			'sourceAmt' => yii::t('app', 'Source Amt'),
                			'issuerRfc' => yii::t('app', 'Issuer Rfc'),
                			'issuerName' => yii::t('app', 'Issuer Name'),
                        			                        'cfdAddresses' => yii::t('app', 'Cfd Addresses'),
		);
	}

	public function search() {
		$criteria = new CDbCriteria;

		$criteria->compare('id', $this->id);
		$criteria->compare('version', $this->version, true);
		$criteria->compare('serial', $this->serial, true);
		$criteria->compare('folio', $this->folio);
		$criteria->compare('uuid', $this->uuid, true);
		$criteria->compare('dttm', $this->dttm, true);
		$criteria->compare('seal', $this->seal, true);
		$criteria->compare('paymentType', $this->paymentType, true);
		$criteria->compare('certNbr', $this->certNbr, true);
		$criteria->compare('certificate', $this->certificate, true);
		$criteria->compare('paymentTerms', $this->paymentTerms, true);
		$criteria->compare('subTotal', $this->subTotal, true);
		$criteria->compare('discount', $this->discount, true);
		$criteria->compare('discountReason', $this->discountReason, true);
		$criteria->compare('exchangeRate', $this->exchangeRate, true);
		$criteria->compare('currency', $this->currency, true);
		$criteria->compare('total', $this->total, true);
		$criteria->compare('voucherType', $this->voucherType, true);
		$criteria->compare('paymentMethod', $this->paymentMethod, true);
		$criteria->compare('expeditionPlace', $this->expeditionPlace, true);
		$criteria->compare('paymentAcctNbr', $this->paymentAcctNbr, true);
		$criteria->compare('sourceFolio', $this->sourceFolio);
		$criteria->compare('sourceSerial', $this->sourceSerial, true);
		$criteria->compare('sourceDttm', $this->sourceDttm, true);
		$criteria->compare('sourceAmt', $this->sourceAmt, true);
		$criteria->compare('issuerRfc', $this->issuerRfc, true);
		$criteria->compare('issuerName', $this->issuerName, true);

		return new CActiveDataProvider($this, array(
			'criteria' => $criteria,
		));
	}
}