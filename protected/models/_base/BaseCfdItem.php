<?php

/**
 * This is the model base class for the table "CfdItem".
 * DO NOT MODIFY THIS FILE! It is automatically generated by giix.
 * If any changes are necessary, you must set or override the required
 * property or method in class "CfdItem".
 *
 * Columns in table "CfdItem" available as properties of the model,
 * followed by relations of table "CfdItem" available as properties of the model.
 *
 * @property integer $id
 * @property integer $Cfd_id
 * @property string $qty
 * @property string $uom
 * @property string $productCode
 * @property string $description
 * @property string $unitPrice
 * @property string $amt
 *
 * @property Cfd $cfd
 * @property CfdItemAttribute[] $cfdItemAttributes
 * @property CustomsPermit[] $customsPermits
 */
abstract class BaseCfdItem extends EAVActiveRecord {

	public static function model($className=__CLASS__) {
		return parent::model($className);
	}

	public function tableName() {
		return 'CfdItem';
	}

	public static function label($n = 1) {
        return Yii::t('app', 'Cfd Item|Cfd Items', $n);
	}

	public static function representingColumn() {
		return 'qty';
	}

	public function rules() {
		return array(
			array('Cfd_id, qty, description, unitPrice', 'required'),
			array('Cfd_id', 'numerical', 'integerOnly'=>true),
			array('qty, unitPrice, amt', 'length', 'max'=>64),
			array('uom, productCode', 'safe'),
			array('uom, productCode, amt', 'default', 'setOnEmpty' => true, 'value' => null),
			array('id, Cfd_id, qty, uom, productCode, description, unitPrice, amt', 'safe', 'on'=>'search'),
		);
	}

	public function relations() {
		$relations = array(
			'cfd' => array(self::BELONGS_TO, 'Cfd', 'Cfd_id'),
			'cfdItemAttributes' => array(self::HAS_MANY, 'CfdItemAttribute', 'CfdItem_id'),
			'customsPermits' => array(self::MANY_MANY, 'CustomsPermit', 'CfdItem_has_CustomsPermit(CfdItem_id, CustomsPermit_id)'),
		);
                return array_merge($relations, parent::relations());
	}

	public function pivotModels() {
		return array(
			'customsPermits' => 'CfdItemHasCustomsPermit',
		);
	}

	public function attributeLabels() {
		return array(
                			'id' => yii::t('app', 'Id'),
                        			                        'Cfd_id' => yii::t('app', 'Cfd'),
                			'qty' => yii::t('app', 'Qty'),
                			'uom' => yii::t('app', 'Uom'),
                			'productCode' => yii::t('app', 'Product Code'),
                			'description' => yii::t('app', 'Description'),
                			'unitPrice' => yii::t('app', 'Unit Price'),
                			'amt' => yii::t('app', 'Amt'),
                        			                        'cfd' => yii::t('app', 'Cfd'),
                        			                        'cfdItemAttributes' => yii::t('app', 'Cfd Item Attributes'),
                        			                        'customsPermits' => yii::t('app', 'Customs Permits'),
		);
	}


	public function search() {
		$criteria = new CDbCriteria;

		$criteria->compare('id', $this->id);
		$criteria->compare('Cfd_id', $this->Cfd_id);
		$criteria->compare('qty', $this->qty, true);
		$criteria->compare('uom', $this->uom, true);
		$criteria->compare('productCode', $this->productCode, true);
		$criteria->compare('description', $this->description, true);
		$criteria->compare('unitPrice', $this->unitPrice, true);
		$criteria->compare('amt', $this->amt, true);

		return new CActiveDataProvider($this, array(
			'criteria' => $criteria,
                        'pagination' => array('pageSize' => Yii::app()->user->getState('pageSize', Yii::app()->params['defaultPageSize'])),
		));
	}
}