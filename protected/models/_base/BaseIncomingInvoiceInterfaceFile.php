<?php

/**
 * This is the model base class for the table "IncomingInvoiceInterfaceFile".
 * DO NOT MODIFY THIS FILE! It is automatically generated by giix.
 * If any changes are necessary, you must set or override the required
 * property or method in class "IncomingInvoiceInterfaceFile".
 *
 * Columns in table "IncomingInvoiceInterfaceFile" available as properties of the model,
 * followed by relations of table "IncomingInvoiceInterfaceFile" available as properties of the model.
 *
 * @property integer $id
 * @property string $fileName
 * @property string $receptionDttm
 * @property string $processDttm
 * @property string $note
 * @property string $nativeXmlFile
 * @property integer $IncomingInvoiceInterfaceFileStatus_id
 *
 * @property IncomingInvoiceInterfaceFileStatus $incomingInvoiceInterfaceFileStatus
 */
abstract class BaseIncomingInvoiceInterfaceFile extends GxActiveRecord {

	public static function model($className=__CLASS__) {
		return parent::model($className);
	}

	public function tableName() {
		return 'IncomingInvoiceInterfaceFile';
	}

	public static function label($n = 1) {
        return Yii::t('app', 'Incoming Invoice Interface File|Incoming Invoice Interface Files', $n);
	}

	public static function representingColumn() {
		return 'fileName';
	}

	public function rules() {
		return array(
			array('IncomingInvoiceInterfaceFileStatus_id', 'required'),
			array('IncomingInvoiceInterfaceFileStatus_id', 'numerical', 'integerOnly'=>true),
			array('fileName', 'length', 'max'=>255),
			array('receptionDttm, processDttm, note, nativeXmlFile', 'safe'),
			array('fileName, receptionDttm, processDttm, note, nativeXmlFile', 'default', 'setOnEmpty' => true, 'value' => null),
			array('id, fileName, receptionDttm, processDttm, note, nativeXmlFile, IncomingInvoiceInterfaceFileStatus_id', 'safe', 'on'=>'search'),
		);
	}

	public function relations() {
		return array(
			'incomingInvoiceInterfaceFileStatus' => array(self::BELONGS_TO, 'IncomingInvoiceInterfaceFileStatus', 'IncomingInvoiceInterfaceFileStatus_id'),
		);
	}

	public function pivotModels() {
		return array(
		);
	}

	public function attributeLabels() {
		return array(
                			'id' => yii::t('app', 'Id'),
                			'fileName' => yii::t('app', 'File Name'),
                			'receptionDttm' => yii::t('app', 'Reception Dttm'),
                			'processDttm' => yii::t('app', 'Process Dttm'),
                			'note' => yii::t('app', 'Note'),
                			'nativeXmlFile' => yii::t('app', 'Native Xml File'),
                        			                        'IncomingInvoiceInterfaceFileStatus_id' => yii::t('app', 'Incoming Invoice Interface File Status'),
                        			                        'incomingInvoiceInterfaceFileStatus' => yii::t('app', 'Incoming Invoice Interface File Status'),
		);
	}

    public function defaultScope() {
        return array('order' => $this->getTableAlias(false, false) . '.' . BaseIncomingInvoiceInterfaceFile::representingColumn() . ' ASC');
    }

	public function search() {
		$criteria = new CDbCriteria;

		$criteria->compare('id', $this->id);
		$criteria->compare('fileName', $this->fileName, true);
		$criteria->compare('receptionDttm', $this->receptionDttm, true);
		$criteria->compare('processDttm', $this->processDttm, true);
		$criteria->compare('note', $this->note, true);
		$criteria->compare('nativeXmlFile', $this->nativeXmlFile, true);
		$criteria->compare('IncomingInvoiceInterfaceFileStatus_id', $this->IncomingInvoiceInterfaceFileStatus_id);

		return new CActiveDataProvider($this, array(
			'criteria' => $criteria,
                        'pagination' => array('pageSize' => Yii::app()->user->getState('pageSize', Yii::app()->params['defaultPageSize'])),
		));
	}
}