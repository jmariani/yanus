<?php

/**
 * This is the model base class for the table "Party".
 * DO NOT MODIFY THIS FILE! It is automatically generated by giix.
 * If any changes are necessary, you must set or override the required
 * property or method in class "Party".
 *
 * Columns in table "Party" available as properties of the model,
 * followed by relations of table "Party" available as properties of the model.
 *
 * @property integer $id
 * @property integer $person
 * @property string $effDt
 *
 * @property CfdParty[] $cfdParties
 * @property PartyIdentifier[] $partyIdentifiers
 * @property PartyMail[] $partyMails
 * @property PartyName[] $partyNames
 * @property PartyPaymentMethod[] $partyPaymentMethods
 * @property PartyRole[] $partyRoles
 */
abstract class BaseParty extends EAVActiveRecord {

	public static function model($className=__CLASS__) {
		return parent::model($className);
	}

	public function tableName() {
		return 'Party';
	}

	public static function label($n = 1) {
        return Yii::t('app', 'Party|Parties', $n);
	}

	public static function representingColumn() {
		return 'effDt';
	}

	public function relations() {
		$relations = array(
			'cfdParties' => array(self::HAS_MANY, 'CfdParty', 'Party_id'),
			'partyIdentifiers' => array(self::HAS_MANY, 'PartyIdentifier', 'Party_id'),
			'partyMails' => array(self::HAS_MANY, 'PartyMail', 'Party_id'),
			'partyNames' => array(self::HAS_MANY, 'PartyName', 'Party_id'),
			'partyPaymentMethods' => array(self::HAS_MANY, 'PartyPaymentMethod', 'Party_id'),
			'partyRoles' => array(self::HAS_MANY, 'PartyRole', 'Party_id'),
		);
                return array_merge($relations, parent::relations());
	}
	public function rules() {
		return array(
			array('person', 'numerical', 'integerOnly'=>true),
			array('effDt', 'safe'),
			array('person, effDt', 'default', 'setOnEmpty' => true, 'value' => null),
			array('id, person, effDt', 'safe', 'on'=>'search'),
		);
	}
	public function search() {
		$criteria = new CDbCriteria;

		$criteria->compare('id', $this->id);
		$criteria->compare('person', $this->person);
		$criteria->compare('effDt', $this->effDt, true);

		return new CActiveDataProvider($this, array(
			'criteria' => $criteria,
                        'pagination' => array('pageSize' => Yii::app()->user->getState('pageSize', Yii::app()->params['defaultPageSize'])),
                        'sort' => array(
                            'defaultOrder' => array(
                                $this->representingColumn() => CSort::SORT_ASC
                            )
                        )
		));
	}

	public function pivotModels() {
		return array(
		);
	}

	public function attributeLabels() {
		return array(
                			'id' => yii::t('app', 'Id'),
                			'person' => yii::t('app', 'Person'),
                			'effDt' => yii::t('app', 'Eff Dt'),
                        			                        'cfdParties' => yii::t('app', 'Cfd Parties'),
                        			                        'partyIdentifiers' => yii::t('app', 'Party Identifiers'),
                        			                        'partyMails' => yii::t('app', 'Party Mails'),
                        			                        'partyNames' => yii::t('app', 'Party Names'),
                        			                        'partyPaymentMethods' => yii::t('app', 'Party Payment Methods'),
                        			                        'partyRoles' => yii::t('app', 'Party Roles'),
		);
	}
}