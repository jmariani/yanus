<?php

/**
 * This is the model base class for the table "Party_has_PaymentMethod".
 * DO NOT MODIFY THIS FILE! It is automatically generated by giix.
 * If any changes are necessary, you must set or override the required
 * property or method in class "PartyHasPaymentMethod".
 *
 * Columns in table "Party_has_PaymentMethod" available as properties of the model,
 * followed by relations of table "Party_has_PaymentMethod" available as properties of the model.
 *
 * @property string $id
 * @property integer $Party_id
 * @property integer $PaymentMethod_id
 * @property string $effDt
 * @property integer $active
 *
 * @property Party $party
 * @property PaymentMethod $paymentMethod
 */
abstract class BasePartyHasPaymentMethod extends EAVActiveRecord {

	public static function model($className=__CLASS__) {
		return parent::model($className);
	}

	public function tableName() {
		return 'Party_has_PaymentMethod';
	}

	public static function label($n = 1) {
        return Yii::t('app', 'Party Has Payment Method|Party Has Payment Methods', $n);
	}

	public static function representingColumn() {
		return 'id';
	}

	public function relations() {
		$relations = array(
			'party' => array(self::BELONGS_TO, 'Party', 'Party_id'),
			'paymentMethod' => array(self::BELONGS_TO, 'PaymentMethod', 'PaymentMethod_id'),
		);
                return array_merge($relations, parent::relations());
	}
	public function rules() {
		return array(
			array('id, Party_id, PaymentMethod_id', 'required'),
			array('Party_id, PaymentMethod_id, active', 'numerical', 'integerOnly'=>true),
			array('id', 'length', 'max'=>45),
			array('effDt', 'safe'),
			array('effDt, active', 'default', 'setOnEmpty' => true, 'value' => null),
			array('id, Party_id, PaymentMethod_id, effDt, active', 'safe', 'on'=>'search'),
		);
	}
	public function search() {
		$criteria = new CDbCriteria;

		$criteria->compare('id', $this->id, true);
		$criteria->compare('Party_id', $this->Party_id);
		$criteria->compare('PaymentMethod_id', $this->PaymentMethod_id);
		$criteria->compare('effDt', $this->effDt, true);
		$criteria->compare('active', $this->active);

		return new CActiveDataProvider($this, array(
			'criteria' => $criteria,
                        'pagination' => array('pageSize' => Yii::app()->user->getState('pageSize', Yii::app()->params['defaultPageSize'])),
		));
	}

	public function pivotModels() {
		return array(
		);
	}

	public function attributeLabels() {
		return array(
                			'id' => yii::t('app', 'Id'),
                        			                        'Party_id' => yii::t('app', 'Party'),
                        			                        'PaymentMethod_id' => yii::t('app', 'Payment Method'),
                			'effDt' => yii::t('app', 'Eff Dt'),
                			'active' => yii::t('app', 'Active'),
                        			                        'party' => yii::t('app', 'Party'),
                        			                        'paymentMethod' => yii::t('app', 'Payment Method'),
		);
	}
}