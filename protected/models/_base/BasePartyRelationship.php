<?php

/**
 * This is the model base class for the table "PartyRelationship".
 * DO NOT MODIFY THIS FILE! It is automatically generated by giix.
 * If any changes are necessary, you must set or override the required
 * property or method in class "PartyRelationship".
 *
 * Columns in table "PartyRelationship" available as properties of the model,
 * followed by relations of table "PartyRelationship" available as properties of the model.
 *
 * @property integer $id
 * @property integer $fromPartyRole_id
 * @property integer $toPartyRole_id
 * @property integer $enabled
 * @property string $effDt
 * @property string $type
 * @property string $identifier
 *
 * @property PartyRole $fromPartyRole
 * @property PartyRole $toPartyRole
 */
abstract class BasePartyRelationship extends EAVActiveRecord {

	public static function model($className=__CLASS__) {
		return parent::model($className);
	}

	public function tableName() {
		return 'PartyRelationship';
	}

	public static function label($n = 1) {
        return Yii::t('app', 'Party Relationship|Party Relationships', $n);
	}

	public static function representingColumn() {
		return 'effDt';
	}

	public function relations() {
		$relations = array(
			'fromPartyRole' => array(self::BELONGS_TO, 'PartyRole', 'fromPartyRole_id'),
			'toPartyRole' => array(self::BELONGS_TO, 'PartyRole', 'toPartyRole_id'),
		);
                return array_merge($relations, parent::relations());
	}
	public function rules() {
		return array(
			array('fromPartyRole_id, toPartyRole_id', 'required'),
			array('fromPartyRole_id, toPartyRole_id, enabled', 'numerical', 'integerOnly'=>true),
			array('type, identifier', 'length', 'max'=>45),
			array('effDt', 'safe'),
			array('enabled, effDt, type, identifier', 'default', 'setOnEmpty' => true, 'value' => null),
			array('id, fromPartyRole_id, toPartyRole_id, enabled, effDt, type, identifier', 'safe', 'on'=>'search'),
		);
	}
	public function search() {
		$criteria = new CDbCriteria;

		$criteria->compare('id', $this->id);
		$criteria->compare('fromPartyRole_id', $this->fromPartyRole_id);
		$criteria->compare('toPartyRole_id', $this->toPartyRole_id);
		$criteria->compare('enabled', $this->enabled);
		$criteria->compare('effDt', $this->effDt, true);
		$criteria->compare('type', $this->type, true);
		$criteria->compare('identifier', $this->identifier, true);

		return new CActiveDataProvider($this, array(
			'criteria' => $criteria,
                        'pagination' => array('pageSize' => Yii::app()->user->getState('pageSize', Yii::app()->params['defaultPageSize'])),
		));
	}

	public function pivotModels() {
		return array(
		);
	}

	public function attributeLabels() {
		return array(
                			'id' => yii::t('app', 'Id'),
                        			                        'fromPartyRole_id' => yii::t('app', 'From Party Role'),
                        			                        'toPartyRole_id' => yii::t('app', 'To Party Role'),
                			'enabled' => yii::t('app', 'Enabled'),
                			'effDt' => yii::t('app', 'Eff Dt'),
                			'type' => yii::t('app', 'Type'),
                			'identifier' => yii::t('app', 'Identifier'),
                        			                        'fromPartyRole' => yii::t('app', 'From Party Role'),
                        			                        'toPartyRole' => yii::t('app', 'To Party Role'),
		);
	}
}