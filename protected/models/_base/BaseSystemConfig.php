<?php

/**
 * This is the model base class for the table "SystemConfig".
 * DO NOT MODIFY THIS FILE! It is automatically generated by giix.
 * If any changes are necessary, you must set or override the required
 * property or method in class "SystemConfig".
 *
 * Columns in table "SystemConfig" available as properties of the model,
 * and there are no model relations.
 *
 * @property integer $id
 * @property string $description
 * @property string $code
 * @property string $value
 *
 */
abstract class BaseSystemConfig extends GxActiveRecord {

	public static function model($className=__CLASS__) {
		return parent::model($className);
	}

	public function tableName() {
		return 'SystemConfig';
	}

	public static function label($n = 1) {
        return Yii::t('app', 'System Config|System Configs', $n);
	}

	public static function representingColumn() {
		return 'description';
	}

	public function rules() {
		return array(
			array('description, code, value', 'required'),
			array('description', 'length', 'max'=>255),
			array('code', 'length', 'max'=>45),
			array('id, description, code, value', 'safe', 'on'=>'search'),
		);
	}

	public function relations() {
		return array(
		);
	}

	public function pivotModels() {
		return array(
		);
	}

	public function attributeLabels() {
		return array(
                			'id' => yii::t('app', 'Id'),
                			'description' => yii::t('app', 'Description'),
                			'code' => yii::t('app', 'Code'),
                			'value' => yii::t('app', 'Value'),
		);
	}

    public function defaultScope() {
        return array('order' => $this->getTableAlias(false, false) . '.' . BaseSystemConfig::representingColumn() . ' ASC');
    }

	public function search() {
		$criteria = new CDbCriteria;

		$criteria->compare('id', $this->id);
		$criteria->compare('description', $this->description, true);
		$criteria->compare('code', $this->code, true);
		$criteria->compare('value', $this->value, true);

		return new CActiveDataProvider($this, array(
			'criteria' => $criteria,
                        'pagination' => array('pageSize' => Yii::app()->user->getState('pageSize', Yii::app()->params['defaultPageSize'])),
		));
	}
}